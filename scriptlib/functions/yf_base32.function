#! /bin/true
# vi: set tabstop=4 syntax=sh : # colorize it in 'vi' and use shorter tabstops
#######################################################################################
#                                                                                     #
# base32 - convert STDIN to a base32 string using AVMs presentation with characters   #
#          A to Z and 1 to 6                                                          #
#                                                                                     #
# parameters:                                                                         #
#   none                                                                              #
#                                                                                     #
# stdin:                                                                              #
#   the content to convert, size should be a multiple of 5 or it will be padded with  #
#   zero bytes to the next integral boundary of 5                                     #
#                                                                                     #
# stdout:                                                                             #
#   the base32 encoded input, size is always a multiple of 8                          #
#                                                                                     #
# return code:                                                                        #
#   0 - stdout value is valid                                                         #
#   1 - error occured, a POSIX compatible 'cmp' command was not found;                #
#       another possible error is a STDIN descriptor attached to a terminal           #
#                                                                                     #
#######################################################################################
#                                                                                     #
# U: cmp expr printf                                                                  #
# W: -                                                                                #
# I: -                                                                                #
# F: -                                                                                #
# K: avm encryption fritzbox                                                          #
#                                                                                     #
#######################################################################################
yf_base32()
(
	yf_base32_append()
	{
		for x in $*; do
			b=$(( b + 8 ))
			v=$(( ( v << 8 ) + $x ))
			while [ $b -ge 5 ]; do
				b=$(( b - 5 ))
				d=$(( v >> b ))
				printf "%c" $(expr "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456" : ".\{$d\}\(.\).*")
				v=$(( v % ( 2 ** b ) ))
			done
		done
	}

	yf_base32_read_octal()
	{
		i=1
		b=0
		v=0
		while read pos left right; do
			if [ $i -lt $pos ]; then
				unset z
				while [ $i -lt $pos ]; do # zeroes are equal for 'cmp'
					[ ${#z} -gt 32 ] && yf_base32_append $z && unset z # output next 16 zeroes
					z="$z 0"
					i=$(( i + 1 ))
				done
				yf_base32_append $z
			fi
			yf_base32_append 0$right
			i=$(( pos + 1 ))
		done
		j=$(( 5 - ( ( i - 1 ) % 5 ) ))
		if [ $j -ne 5 ]; then
			unset z
			while [ $j -gt 0 ]; do
				z="$z 0"
				j=$(( j - 1 ))
			done
			yf_base32_append $z
		fi
		return 0
	}

	[ -t 0 ] && return 1
	command -v cmp 2>/dev/null 1>&2 || return 1
	command cmp -l -- /dev/zero - 2>/dev/null | yf_base32_read_octal
	return $rc
)
