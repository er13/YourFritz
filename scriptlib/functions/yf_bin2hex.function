#! /bin/true
# vi: set tabstop=4 syntax=sh : # colorize it in 'vi' and use shorter tabstops
#######################################################################################
#                                                                                     #
# bin2hex - convert binary data its hexadecimal representation (via base64 encoding)  #
#                                                                                     #
# parameters:                                                                         #
#   none                                                                              #
#                                                                                     #
# stdio:                                                                              #
#   binary data to encode                                                             #
#                                                                                     #
# stdout:                                                                             #
#   input data converted to its hexadecimal format (one char per nibble) as string    #
#                                                                                     #
# return code:                                                                        #
#   always 0 - no errors possible, empty input results in empty output                #
#                                                                                     #
# remarks:                                                                            #
#   - this version can handle whitespace, newline and NUL characters too              #
#   - it needs the "yf_base64" utility to encode the binary data to base64 and the    #
#     output of this applet is translated to hexadecimal in the next step             #
#   - this "double conversion" is time-consuming and you should use yf_str2hex as     #
#     often as possible                                                               #
#                                                                                     #
#######################################################################################
#                                                                                     #
# U: printf                                                                           #
# W: -                                                                                #
# F: yf_base64 yf_substring yf_index                                                  #
# I: -                                                                                #
# K: convert                                                                          #
#                                                                                     #
#######################################################################################
yf_bin2hex()
(
	[ -t 0 ] && return 0
	v=0 
	l=0
	in=$(yf_base64 2>/dev/null | sed -e ':x;$!N;s/\n//;tx' -e 's/\r//g' -e 's/+/_/g')
	[ ${#in} -eq 0 ] && return
	i=0
	f=0
	while [ $i -lt ${#in} ]; do
		part="$(printf "%s" $(yf_substring "$in" $i 4) | sed -e 's/./& /g')"
		i=$(( i + 4 ))
		for c in $part; do
			[ $c = = ] \
				&& f=$(( f + 1 )) \
				|| v=$(( ( v << 6 ) + $(( $(yf_index "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_/" $c) - 1 )) ))
		done
		v=$(( v >> ( f * 2 ) ))
		printf "%0$(( ( 3 - f ) << 1 ))x" $v
		l=0
		v=0
	done
	return 0
)
